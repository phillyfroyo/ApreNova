generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  nativeLanguage String?
  quizLevel      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isPremium Boolean @default(false)


  accounts Account[]
  sessions Session[]

  sessionLogs      SessionLog[] // ✅ now inside User model
  completedStories CompletedStory[] // ✅ now inside User model
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SessionLog {
  id        String   @id @default(cuid())
  userId    String
  ms        Int
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CompletedStory {
  id          String   @id @default(cuid())
  userId      String
  storySlug   String
  level       String
  part        String
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
